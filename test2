# PowerShell 배포 자동화: 상세 가이드

PowerShell을 사용한 배포 자동화는 IT 운영 및 개발 프로세스를 효율적으로 개선할 수 있는 강력한 방법입니다. 아래에서 PowerShell 배포 자동화에 대한 상세한 내용을 설명드리겠습니다.

## 1. PowerShell 배포 자동화 개요

PowerShell은 Windows 환경에서 시스템 관리 및 배포 작업을 자동화하기 위한 강력한 스크립팅 언어이자 명령줄 셸입니다. 배포 자동화는 다음과 같은 이점을 제공합니다:

- 반복 작업 감소
- 일관성 있는 배포 프로세스
- 인적 오류 최소화
- 배포 시간 단축
- 감사 및 추적 가능성 향상

## 2. 주요 PowerShell 배포 자동화 기술

### 2.1 PowerShell 스크립트 작성

```powershell
# 기본 배포 스크립트 예제
$deploymentPath = "C:\Deployments"
$sourcePath = "\\fileserver\applications\v1.0"

# 대상 서버에 디렉토리 생성
if (-not (Test-Path $deploymentPath)) {
    New-Item -ItemType Directory -Path $deploymentPath -Force
}

# 파일 복사
Copy-Item -Path "$sourcePath\*" -Destination $deploymentPath -Recurse -Force

# 서비스 중지 (필요한 경우)
Stop-Service -Name "MyApplicationService" -ErrorAction SilentlyContinue

# 설치 실행
Start-Process -FilePath "$deploymentPath\setup.exe" -ArgumentList "/quiet" -Wait

# 서비스 시작
Start-Service -Name "MyApplicationService"
```

### 2.2 PowerShell DSC (Desired State Configuration)

```powershell
Configuration WebServerDeployment {
    Import-DscResource -ModuleName PSDesiredStateConfiguration

    Node "webserver01" {
        WindowsFeature IIS {
            Ensure = "Present"
            Name = "Web-Server"
        }

        File WebsiteContent {
            Ensure = "Present"
            SourcePath = "\\fileserver\webcontent"
            DestinationPath = "C:\inetpub\wwwroot"
            Recurse = $true
            Type = "Directory"
        }
    }
}

# 구성 MOF 파일 생성
WebServerDeployment -OutputPath "C:\DSCConfigs"

# 구성 적용
Start-DscConfiguration -Path "C:\DSCConfigs" -Wait -Verbose
```

### 2.3 PowerShell 모듈 사용

```powershell
# PSScriptTools 모듈 설치
Install-Module -Name PSScriptTools -Force -Scope AllUsers

# 모듈 기반 배포 스크립트
Import-Module PSScriptTools

# 여러 서버에 동시 배포
$servers = "server1", "server2", "server3"
Invoke-Command -ComputerName $servers -ScriptBlock {
    # 배포 작업 수행
    Copy-Item -Path "\\fileserver\deploy\*" -Destination "C:\AppDeploy" -Recurse
    & "C:\AppDeploy\setup.exe" /silent
}
```

## 3. 고급 배포 자동화 기술

### 3.1 CI/CD 파이프라인 통합

- **Azure DevOps 예제**:
```powershell
# Azure DevOps PowerShell 작업
param(
    [string]$targetEnvironment,
    [string]$artifactPath
)

switch ($targetEnvironment) {
    "Dev" {
        $servers = @("dev-web01", "dev-web02")
        $deployPath = "C:\DevDeploy"
    }
    "Prod" {
        $servers = @("prod-web01", "prod-web02", "prod-web03")
        $deployPath = "C:\ProdDeploy"
    }
}

foreach ($server in $servers) {
    # 파일 배포
    Copy-Item -Path "$artifactPath\*" -Destination "\\$server\$($deployPath.Replace(':','$'))" -Recurse -Force
    
    # 원격 실행
    Invoke-Command -ComputerName $server -ScriptBlock {
        Start-Process -FilePath "$using:deployPath\setup.exe" -ArgumentList "/quiet" -Wait
    }
}
```

### 3.2 배포 롤백 메커니즘

```powershell
try {
    # 배포 수행
    & "C:\Deploy\setup.exe" /quiet
    
    # 검증
    $service = Get-Service -Name "MyAppService" -ErrorAction Stop
    if ($service.Status -ne "Running") {
        throw "서비스가 실행되지 않았습니다."
    }
    
    Write-Host "배포 성공"
}
catch {
    Write-Host "배포 실패: $_"
    Write-Host "롤백 시작..."
    
    # 이전 버전 복원
    if (Test-Path "C:\Deploy\PreviousVersion") {
        Copy-Item -Path "C:\Deploy\PreviousVersion\*" -Destination "C:\Deploy" -Recurse -Force
        Start-Service -Name "MyAppService"
    }
    
    throw "롤백 완료. 원래 오류: $_"
}
```

## 4. 모범 사례

1. **매개변수화**: 모든 배포 스크립트는 매개변수를 사용하도록 작성
   ```powershell
   param(
       [string]$SourcePath,
       [string]$DestinationPath,
       [string]$Environment
   )
   ```

2. **로깅 구현**: 모든 배포 작업에 상세 로깅 추가
   ```powershell
   Start-Transcript -Path "C:\Logs\Deployment_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
   ```

3. **에러 처리**: Try/Catch 블록으로 견고한 에러 처리 구현
   ```powershell
   try {
       # 배포 코드
   }
   catch {
       Write-Error "배포 실패: $_"
       exit 1
   }
   ```

4. **테스트**: 실제 배포 전에 스테이징 환경에서 철저히 테스트

5. **버전 관리**: 모든 배포 스크립트를 Git 등 버전 관리 시스템에 저장

6. **보안**: 자격 증명 관리를 위해 PowerShell 비밀 관리 사용
   ```powershell
   $credential = Get-Credential
   $securePassword = ConvertTo-SecureString "P@ssw0rd" -AsPlainText -Force
   ```

## 5. 일반적인 배포 시나리오

### 5.1 웹 애플리케이션 배포

```powershell
# IIS 웹 사이트 배포
Import-Module WebAdministration

$siteName = "MyWebApp"
$appPoolName = "MyAppPool"
$physicalPath = "C:\Websites\MyWebApp"

# 애플리케이션 풀 생성
New-WebAppPool -Name $appPoolName -Force
Set-ItemProperty "IIS:\AppPools\$appPoolName" -Name managedRuntimeVersion -Value "v4.0"

# 웹 사이트 생성
New-Website -Name $siteName -Port 80 -PhysicalPath $physicalPath -ApplicationPool $appPoolName -Force

# 파일 배포
Copy-Item -Path "\\buildserver\latest\*" -Destination $physicalPath -Recurse -Force
```

### 5.2 데이터베이스 변경 배포

```powershell
# SQL Server 배포
$sqlServer = "dbserver01"
$database = "MyAppDB"
$sqlScriptPath = "C:\Deploy\DatabaseChanges.sql"

Invoke-Sqlcmd -ServerInstance $sqlServer -Database $database -InputFile $sqlScriptPath -QueryTimeout 0
```

### 5.3 Windows 서비스 배포

```powershell
# Windows 서비스 배포
$serviceName = "MyBackgroundService"
$serviceExePath = "C:\Services\MyService\MyService.exe"

# 서비스 중지 (이미 존재하는 경우)
Stop-Service -Name $serviceName -ErrorAction SilentlyContinue

# 파일 배포
Copy-Item -Path "\\buildserver\services\*" -Destination "C:\Services\MyService" -Recurse -Force

# 서비스 등록
New-Service -Name $serviceName -BinaryPathName $serviceExePath -DisplayName "My Background Service" -StartupType Automatic

# 서비스 시작
Start-Service -Name $serviceName
```

## 6. 문제 해결 및 디버깅

1. **Verbose 모드 사용**:
   ```powershell
   $VerbosePreference = "Continue"
   ```

2. **원격 오류 캡처**:
   ```powershell
   try {
       Invoke-Command -ComputerName "server01" -ScriptBlock {
           # 배포 코드
       } -ErrorAction Stop
   }
   catch {
       Write-Host "원격 오류: $($_.Exception.Message)"
   }
   ```

3. **로그 분석**:
   ```powershell
   Get-Content "C:\Logs\Deployment.log" -Tail 50 | Where-Object { $_ -match "ERROR" }
   ```

4. **테스트 모드 실행**:
   ```powershell
   $WhatIfPreference = $true
   # 이제 모든 명령은 실제 실행 없이 시뮬레이션 됨
   ```

PowerShell 배포 자동화는 조직의 요구 사항에 따라 단순한 스크립트에서부터 복잡한 CI/CD 파이프라인에 이르기까지 다양한 수준으로 구현할 수 있습니다. 초기에는 간단한 작업부터 시작하여 점진적으로 기능을 확장해 나가는 접근 방식을 권장합니다.